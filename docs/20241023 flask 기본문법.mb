Flask는 파이썬의 경량 웹 프레임워크로, 간단한 웹 애플리케이션을 쉽게 만들 수 있게 해줍니다. Flask의 핵심 기능 중 몇 가지인 @app.route, render_template, redirect, url_for는 웹 페이지와 데이터 처리의 흐름을 관리하는 데 자주 사용됩니다. 각각의 기능을 예제를 통해 설명하겠습니다.

# 1. @app.route

@app.route는 특정 URL에 대해 Flask 애플리케이션이 어떻게 응답할지 지정하는 데 사용됩니다. 즉, 사용자가 해당 URL에 접근했을 때 어떤 함수를 실행할지 정의합니다.

### 예제
```python
from flask import Flask

app = Flask(__name__)

@app.route('/')  # 루트 URL에 대한 요청을 처리
def home():
    return "안녕하세요! 이것은 홈 페이지입니다."

if __name__ == '__main__':
    app.run(debug=True)

```
위 코드에서 / URL에 대한 요청이 들어오면 home 함수가 실행되어 "안녕하세요! 이것은 홈 페이지입니다."라는 응답을 반환합니다.

# 2. render_template

render_template는 HTML 파일을 렌더링하고, 이를 클라이언트에게 반환하는 데 사용됩니다. Flask는 Jinja2라는 템플릿 엔진을 사용하여 파이썬 데이터를 HTML에 쉽게 삽입할 수 있습니다.
### 예제

```python
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html', title="홈 페이지", message="플라스크 웹 애플리케이션에 오신 것을 환영합니다!")

if __name__ == '__main__':
    app.run(debug=True)
```
#### `index.html` 파일
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ title }}</title>
</head>
<body>
    <h1>{{ message }}</h1>
</body>
</html>
```

위 예제에서는 render_template로 index.html을 렌더링하며, title과 message 값을 템플릿으로 전달하여 HTML에 표시합니다.

# 3. redirect

redirect는 클라이언트가 다른 URL로 리다이렉트되도록 할 때 사용합니다. 주로 POST 요청 후 다른 페이지로 이동할 때 사용됩니다.
### 예제
```python
from flask import Flask, redirect

app = Flask(__name__)

@app.route('/')
def home():
    return "홈 페이지입니다."

@app.route('/redirect_example')
def redirect_example():
    return redirect('/')

if __name__ == '__main__':
    app.run(debug=True)
```

/redirect_example URL에 접근하면 클라이언트는 /로 리다이렉트되어 홈 페이지로 이동하게 됩니다.

# 4. url_for

url_for는 Flask 애플리케이션에서 특정 함수에 대한 URL을 생성하는 데 사용됩니다. URL 하드코딩을 피할 수 있어 유지 보수가 용이해집니다.

### 예제
```python
from flask import Flask, redirect, url_for

app = Flask(__name__)

@app.route('/')
def home():
    return "홈 페이지입니다."

@app.route('/user/<name>')
def user(name):
    return f"안녕하세요, {name}님!"

@app.route('/redirect_user')
def redirect_user():
    return redirect(url_for('user', name='홍길동'))

if __name__ == '__main__':
    app.run(debug=True)

```
위 코드에서 url_for('user', name='홍길동')은 /user/홍길동 URL을 생성하고, 리다이렉트할 때 해당 URL을 사용합니다.

### 전체 예제

```python
from flask import Flask, render_template, redirect, url_for

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html', title="홈", message="플라스크 앱에 오신 걸 환영합니다!")

@app.route('/user/<name>')
def user(name):
    return f"안녕하세요, {name}님!"

@app.route('/redirect_user')
def redirect_user():
    return redirect(url_for('user', name='홍길동'))

if __name__ == '__main__':
    app.run(debug=True)

```

#### `index.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ title }}</title>
</head>
<body>
    <h1>{{ message }}</h1>
</body>
</html>


```

위 예제에서는 /redirect_user로 이동하면 홍길동이라는 이름으로 /user/<name> 페이지로 리다이렉트됩니다. url_for를 사용함으로써 함수명을 기반으로 URL을 생성할 수 있어 코드 유지보수가 더 쉬워집니다.
------

이와 같이 Flask의 기본 기능들은 라우팅, 템플릿 렌더링, 리다이렉션, URL 생성 등의 작업을 매우 간편하게 만들어줍니다.
